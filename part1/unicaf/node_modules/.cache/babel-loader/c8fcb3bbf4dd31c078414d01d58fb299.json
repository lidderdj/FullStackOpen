{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\lidde\\\\Documents\\\\MOOC Full Stack Course\\\\part1\\\\unicaf\\\\unicaf\\\\src\\\\index.js\";\nimport React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\n\nconst Statistic = props => {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 6,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 4\n    }\n  }, props.text, \" \", props.value));\n};\n\nconst Statistics = props => {\n  const Statistics = [{\n    good: props.good,\n    bad: props.bad,\n    neutral: props.neutral,\n    all: props.good + props.neutral + props.bad,\n    average: (props.good * 1 + props.bad * -1) / this.all,\n    positive: props.good / this.all * 100\n  }];\n\n  if (all === 0) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 3\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 4\n      }\n    }, \"No feedback given\"));\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(Statistic, {\n    text: \"Good\",\n    value: Statistics.good,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(Statistic, {\n    text: \"Neutral\",\n    value: Statistics.neutral,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(Statistic, {\n    text: \"Bad\",\n    value: Statistics.bad,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(Statistic, {\n    text: \"All\",\n    value: Statistics.all,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(Statistic, {\n    text: \"Average\",\n    value: Statistics.average,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(Statistic, {\n    text: \"Positive\",\n    value: Statistics.positive,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 5\n    }\n  }));\n};\n\nconst Button = ({\n  onClick,\n  text\n}) => /*#__PURE__*/React.createElement(\"button\", {\n  onClick: onClick,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 3\n  }\n}, text);\n\nconst App = () => {\n  // save clicks of each button to own state\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n\n  const handleGoodClick = () => {\n    setGood(good + 1);\n  };\n\n  const handleNeutralClick = () => {\n    setNeutral(neutral + 1);\n  };\n\n  const handleBadClick = () => {\n    setBad(bad + 1);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }\n  }, \"Give Feedback\"), /*#__PURE__*/React.createElement(Button, {\n    onClick: handleGoodClick,\n    text: \"Good\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    onClick: handleNeutralClick,\n    text: \"Neutral\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    onClick: handleBadClick,\n    text: \"Bad\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 4\n    }\n  }, \"Statistics\"), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(Statistics, {\n    good: good,\n    neutral: neutral,\n    bad: bad,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 4\n    }\n  })));\n};\n\nReactDOM.render( /*#__PURE__*/React.createElement(App, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 17\n  }\n}), document.getElementById('root'));\n/*import React, { useState } from 'react'\nimport ReactDOM from 'react-dom'\n\nconst Statistic = (props) => {\n\t\n}\n\nconst Statistics = (props) => {\n\tconst all = props.good+props.neutral+props.bad\n\tconst average = ((props.good*1)+(props.bad*-1))/all\n  \tconst positive = (props.good/all)*100\n\t\n\tif (all === 0) {\n\t\treturn(\n\t\t<div>\n\t\t\t<p>\n\t\t\tNo feedback given\n\t\t\t</p>\n\t\t</div>\n\t\t)\n\t}\n\t\n\treturn (\n\t\t<div>\n\t\t\t<p>\n\t\t\t\tGood = {props.good} <br/>\n\t\t\t\tNeutral = {props.neutral} <br/>\n\t\t\t\tBad = {props.bad} <br/>\n\t\t\t\tAll={all} <br/>\n\t\t\t\tAverage = {average} <br/>\n\t\t\t\tPositive = {positive}%\n\t\t\t</p>\n\t\t</div>\n\t\t)\n}\n\nconst App = () => {\n  // save clicks of each button to own state\n\t\n  const [good, setGood] = useState(0)\n  const [neutral, setNeutral] = useState(0)\n  const [bad, setBad] = useState(0)\t\n\n  return (\n    <div>\n      <h1>Give Feedback</h1>\n        <button onClick={() => setGood(good + 1)}>good</button>\n        <button onClick={() => setNeutral(neutral + 1)}>neutral</button>  \n        <button onClick={() => setBad(bad + 1)}>bad</button>  \n\t  <h1>Statistics</h1>\n\t\t<Statistics good={good} bad={bad} neutral={neutral}/>\n    </div>\n  )\n}\n\nReactDOM.render(<App />, \n  document.getElementById('root')\n)*/","map":{"version":3,"sources":["C:/Users/lidde/Documents/MOOC Full Stack Course/part1/unicaf/unicaf/src/index.js"],"names":["React","useState","ReactDOM","Statistic","props","text","value","Statistics","good","bad","neutral","all","average","positive","Button","onClick","App","setGood","setNeutral","setBad","handleGoodClick","handleNeutralClick","handleBadClick","render","document","getElementById"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport ReactDOM from 'react-dom'\n\nconst Statistic = (props) => {\n\treturn (\n\t\t<div>\n\t\t\t<p>\n\t\t\t{props.text} {props.value}\n\t\t\t</p>\n\t\t</div>\n\t)\n}\n\nconst Statistics = (props) => {\n\tconst Statistics = [{\n\t\tgood: props.good,\n\t\tbad: props.bad,\n\t\tneutral: props.neutral,\n\t\tall: props.good+props.neutral+props.bad,\n\t\taverage: ((props.good*1)+(props.bad*-1))/this.all,\n  \t\tpositive: (props.good/this.all)*100}]\n\t\n\tif (all === 0) {\n\t\treturn(\n\t\t<div>\n\t\t\t<p>\n\t\t\tNo feedback given\n\t\t\t</p>\n\t\t</div>\n\t\t)\n\t}\n\t\n\treturn (\n\t\t<div>\n\t\t\t\t<Statistic text=\"Good\" value={Statistics.good} />\n\t\t\t\t<Statistic text=\"Neutral\" value={Statistics.neutral} />\n\t\t\t\t<Statistic text=\"Bad\" value={Statistics.bad} />\n\t\t\t\t<Statistic text=\"All\" value={Statistics.all} />\n\t\t\t\t<Statistic text=\"Average\" value={Statistics.average} />\n\t\t\t\t<Statistic text=\"Positive\" value={Statistics.positive} />\n\t\t</div>\n\t)\n}\n\nconst Button = ({ onClick, text }) => (\n  <button onClick={onClick}>\n    {text}\n  </button>\n)\n\nconst App = () => {\n  // save clicks of each button to own state\n\t\n  const [good, setGood] = useState(0)\n  const [neutral, setNeutral] = useState(0)\n  const [bad, setBad] = useState(0)\t\n  \n  const handleGoodClick = () => {\n\t  setGood(good +1)\n  }\n  \n  const handleNeutralClick = () => {\n\t  setNeutral(neutral +1)\n  }\n\t\n  const handleBadClick = () => {\n\t  setBad(bad +1)\n  }\n\n  return (\n    <div>\n      <h1>Give Feedback</h1>\n        <Button onClick={handleGoodClick} text='Good' />\n\t  \t<Button onClick={handleNeutralClick} text='Neutral' />\n\t  \t<Button onClick={handleBadClick} text='Bad' />\n\t  <h1>Statistics</h1>\n\t\t<div>\n\t\t\t<Statistics good={good} neutral={neutral} bad={bad}/>\n\t\t</div>\n    </div>\n  )\n}\n\nReactDOM.render(<App />, \ndocument.getElementById('root')\n)\n\n\n/*import React, { useState } from 'react'\nimport ReactDOM from 'react-dom'\n\nconst Statistic = (props) => {\n\t\n}\n\nconst Statistics = (props) => {\n\tconst all = props.good+props.neutral+props.bad\n\tconst average = ((props.good*1)+(props.bad*-1))/all\n  \tconst positive = (props.good/all)*100\n\t\n\tif (all === 0) {\n\t\treturn(\n\t\t<div>\n\t\t\t<p>\n\t\t\tNo feedback given\n\t\t\t</p>\n\t\t</div>\n\t\t)\n\t}\n\t\n\treturn (\n\t\t<div>\n\t\t\t<p>\n\t\t\t\tGood = {props.good} <br/>\n\t\t\t\tNeutral = {props.neutral} <br/>\n\t\t\t\tBad = {props.bad} <br/>\n\t\t\t\tAll={all} <br/>\n\t\t\t\tAverage = {average} <br/>\n\t\t\t\tPositive = {positive}%\n\t\t\t</p>\n\t\t</div>\n\t\t)\n}\n\nconst App = () => {\n  // save clicks of each button to own state\n\t\n  const [good, setGood] = useState(0)\n  const [neutral, setNeutral] = useState(0)\n  const [bad, setBad] = useState(0)\t\n\n  return (\n    <div>\n      <h1>Give Feedback</h1>\n        <button onClick={() => setGood(good + 1)}>good</button>\n        <button onClick={() => setNeutral(neutral + 1)}>neutral</button>  \n        <button onClick={() => setBad(bad + 1)}>bad</button>  \n\t  <h1>Statistics</h1>\n\t\t<Statistics good={good} bad={bad} neutral={neutral}/>\n    </div>\n  )\n}\n\nReactDOM.render(<App />, \n  document.getElementById('root')\n)*/"]},"metadata":{},"sourceType":"module"}