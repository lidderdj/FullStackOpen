{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\lidde\\\\Documents\\\\MOOC Full Stack Course\\\\part1\\\\unicaf\\\\unicaf\\\\src\\\\index.js\";\nimport React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\n\nconst Statistic = props => {\n  if (props.all === 0) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 7,\n        columnNumber: 3\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 8,\n        columnNumber: 4\n      }\n    }, \"No feedback given\"));\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 4\n    }\n  }, props.text, \" \", props.value));\n};\n\nconst Statistics = props => {\n  const good = props.good;\n  const bad = props.bad;\n  const neutral = props.neutral;\n  const all = props.good + props.neutral + props.bad;\n  const average = (props.good * 1 + props.bad * -1) / all;\n  const positive = props.good / all * 100;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(Statistic, {\n    text: \"Good\",\n    value: good,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(Statistic, {\n    text: \"Neutral\",\n    value: neutral,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(Statistic, {\n    text: \"Bad\",\n    value: bad,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(Statistic, {\n    text: \"All\",\n    value: all,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(Statistic, {\n    text: \"Average\",\n    value: average,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(Statistic, {\n    text: \"Positive\",\n    value: positive,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 5\n    }\n  }));\n};\n\nconst Button = ({\n  onClick,\n  text\n}) => /*#__PURE__*/React.createElement(\"button\", {\n  onClick: onClick,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 3\n  }\n}, text);\n\nconst App = () => {\n  // save clicks of each button to own state\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n\n  const handleGoodClick = () => {\n    setGood(good + 1);\n  };\n\n  const handleNeutralClick = () => {\n    setGood(neutral + 1);\n  };\n\n  const handleBadClick = () => {\n    setGood(neutral + 1);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }\n  }, \"Give Feedback\"), /*#__PURE__*/React.createElement(Button, {\n    onClick: handleGoodClick,\n    text: \"Good\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    onClick: handleNeutralClick,\n    text: \"Neutral\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    onClick: handleBadClick,\n    text: \"Bad\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 4\n    }\n  }, \"Statistics\"), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(Statistics, {\n    good: good,\n    neutral: neutral,\n    bad: bad,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 4\n    }\n  })));\n};\n\nReactDOM.render( /*#__PURE__*/React.createElement(App, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 17\n  }\n}), document.getElementById('root'));\n/*import React, { useState } from 'react'\nimport ReactDOM from 'react-dom'\n\nconst Statistic = (props) => {\n\t\n}\n\nconst Statistics = (props) => {\n\tconst all = props.good+props.neutral+props.bad\n\tconst average = ((props.good*1)+(props.bad*-1))/all\n  \tconst positive = (props.good/all)*100\n\t\n\tif (all === 0) {\n\t\treturn(\n\t\t<div>\n\t\t\t<p>\n\t\t\tNo feedback given\n\t\t\t</p>\n\t\t</div>\n\t\t)\n\t}\n\t\n\treturn (\n\t\t<div>\n\t\t\t<p>\n\t\t\t\tGood = {props.good} <br/>\n\t\t\t\tNeutral = {props.neutral} <br/>\n\t\t\t\tBad = {props.bad} <br/>\n\t\t\t\tAll={all} <br/>\n\t\t\t\tAverage = {average} <br/>\n\t\t\t\tPositive = {positive}%\n\t\t\t</p>\n\t\t</div>\n\t\t)\n}\n\nconst App = () => {\n  // save clicks of each button to own state\n\t\n  const [good, setGood] = useState(0)\n  const [neutral, setNeutral] = useState(0)\n  const [bad, setBad] = useState(0)\t\n\n  return (\n    <div>\n      <h1>Give Feedback</h1>\n        <button onClick={() => setGood(good + 1)}>good</button>\n        <button onClick={() => setNeutral(neutral + 1)}>neutral</button>  \n        <button onClick={() => setBad(bad + 1)}>bad</button>  \n\t  <h1>Statistics</h1>\n\t\t<Statistics good={good} bad={bad} neutral={neutral}/>\n    </div>\n  )\n}\n\nReactDOM.render(<App />, \n  document.getElementById('root')\n)*/","map":{"version":3,"sources":["C:/Users/lidde/Documents/MOOC Full Stack Course/part1/unicaf/unicaf/src/index.js"],"names":["React","useState","ReactDOM","Statistic","props","all","text","value","Statistics","good","bad","neutral","average","positive","Button","onClick","App","setGood","setNeutral","setBad","handleGoodClick","handleNeutralClick","handleBadClick","render","document","getElementById"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport ReactDOM from 'react-dom'\n\nconst Statistic = (props) => {\n\tif (props.all === 0) {\n\t\treturn(\n\t\t<div>\n\t\t\t<p>\n\t\t\tNo feedback given\n\t\t\t</p>\n\t\t</div>\n\t\t)\n\t}\n\treturn (\n\t\t<div>\n\t\t\t<p>\n\t\t\t{props.text} {props.value}\n\t\t\t</p>\n\t\t</div>\n\t)\n}\n\nconst Statistics = (props) => {\n\tconst good = props.good\n\tconst bad = props.bad\n\tconst neutral = props.neutral\n\tconst all = props.good+props.neutral+props.bad\n\tconst average = ((props.good*1)+(props.bad*-1))/all\n  \tconst positive = (props.good/all)*100\n\n\treturn (\n\t\t<div>\n\t\t\t\t<Statistic text=\"Good\" value={good} />\n\t\t\t\t<Statistic text=\"Neutral\" value={neutral} />\n\t\t\t\t<Statistic text=\"Bad\" value={bad} />\n\t\t\t\t<Statistic text=\"All\" value={all} />\n\t\t\t\t<Statistic text=\"Average\" value={average} />\n\t\t\n\t\t\t\t<Statistic text=\"Positive\" value={positive} />\n\t\t</div>\n\t)\n}\n\nconst Button = ({ onClick, text }) => (\n  <button onClick={onClick}>\n    {text}\n  </button>\n)\n\nconst App = () => {\n  // save clicks of each button to own state\n\t\n  const [good, setGood] = useState(0)\n  const [neutral, setNeutral] = useState(0)\n  const [bad, setBad] = useState(0)\t\n  \n  const handleGoodClick = () => {\n\t  setGood(good +1)\n  }\n  \n  const handleNeutralClick = () => {\n\t  setGood(neutral +1)\n  }\n\t\n  const handleBadClick = () => {\n\t  setGood(neutral +1)\n  }\n\n  return (\n    <div>\n      <h1>Give Feedback</h1>\n        <Button onClick={handleGoodClick} text='Good' />\n\t  \t<Button onClick={handleNeutralClick} text='Neutral' />\n\t  \t<Button onClick={handleBadClick} text='Bad' />\n\t  <h1>Statistics</h1>\n\t\t<div>\n\t\t\t<Statistics good={good} neutral={neutral} bad={bad}/>\n\t\t</div>\n    </div>\n  )\n}\n\nReactDOM.render(<App />, \ndocument.getElementById('root')\n)\n\n\n/*import React, { useState } from 'react'\nimport ReactDOM from 'react-dom'\n\nconst Statistic = (props) => {\n\t\n}\n\nconst Statistics = (props) => {\n\tconst all = props.good+props.neutral+props.bad\n\tconst average = ((props.good*1)+(props.bad*-1))/all\n  \tconst positive = (props.good/all)*100\n\t\n\tif (all === 0) {\n\t\treturn(\n\t\t<div>\n\t\t\t<p>\n\t\t\tNo feedback given\n\t\t\t</p>\n\t\t</div>\n\t\t)\n\t}\n\t\n\treturn (\n\t\t<div>\n\t\t\t<p>\n\t\t\t\tGood = {props.good} <br/>\n\t\t\t\tNeutral = {props.neutral} <br/>\n\t\t\t\tBad = {props.bad} <br/>\n\t\t\t\tAll={all} <br/>\n\t\t\t\tAverage = {average} <br/>\n\t\t\t\tPositive = {positive}%\n\t\t\t</p>\n\t\t</div>\n\t\t)\n}\n\nconst App = () => {\n  // save clicks of each button to own state\n\t\n  const [good, setGood] = useState(0)\n  const [neutral, setNeutral] = useState(0)\n  const [bad, setBad] = useState(0)\t\n\n  return (\n    <div>\n      <h1>Give Feedback</h1>\n        <button onClick={() => setGood(good + 1)}>good</button>\n        <button onClick={() => setNeutral(neutral + 1)}>neutral</button>  \n        <button onClick={() => setBad(bad + 1)}>bad</button>  \n\t  <h1>Statistics</h1>\n\t\t<Statistics good={good} bad={bad} neutral={neutral}/>\n    </div>\n  )\n}\n\nReactDOM.render(<App />, \n  document.getElementById('root')\n)*/"]},"metadata":{},"sourceType":"module"}