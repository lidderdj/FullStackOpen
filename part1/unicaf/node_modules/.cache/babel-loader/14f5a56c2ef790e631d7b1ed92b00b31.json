{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\lidde\\\\Documents\\\\MOOC Full Stack Course\\\\part1\\\\unicaf\\\\unicaf\\\\src\\\\index.js\";\nimport React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\n\nconst Statistic = props => {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 4\n    }\n  }, props.name, \" \", props.value), \"Statistics good = \", good, \"Statistics neutral = \", neutral, \"Statistics bad = \", bad, \"Statistics all = \", all, \"Statistics average = \", average, \"Statistics positive = \", positive);\n};\n\nconst Statistics = props => {\n  if (props.all === 0) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 3\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 4\n      }\n    }, \"No feedback given\"));\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(Statistic, {\n    name: \"Good\",\n    value: props.good,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(Statistic, {\n    name: \"Neutral\",\n    value: props.neutral,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(Statistic, {\n    name: \"Bad\",\n    value: props.bad,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(Statistic, {\n    name: \"All\",\n    value: props.all,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(Statistic, {\n    name: \"Average\",\n    value: props.average,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(Statistic, {\n    name: \"Positive\",\n    value: props.positive,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 5\n    }\n  }));\n};\n\nconst App = () => {\n  // save clicks of each button to own state\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n  const all = props.good + props.neutral + props.bad;\n  const average = (props.good * 1 + props.bad * -1) / all;\n  const positive = props.good / all * 100;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }\n  }, \"Give Feedback\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => setGood(good + 1),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }\n  }, \"good\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => setNeutral(neutral + 1),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }\n  }, \"neutral\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => setBad(bad + 1),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }\n  }, \"bad\"), /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 4\n    }\n  }, \"Statistics\"), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 3\n    }\n  }, Statistic));\n};\n\nReactDOM.render( /*#__PURE__*/React.createElement(App, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 17\n  }\n}), document.getElementById('root'));\n/*import React, { useState } from 'react'\nimport ReactDOM from 'react-dom'\n\nconst Statistic = (props) => {\n\t\n}\n\nconst Statistics = (props) => {\n\tconst all = props.good+props.neutral+props.bad\n\tconst average = ((props.good*1)+(props.bad*-1))/all\n  \tconst positive = (props.good/all)*100\n\t\n\tif (all === 0) {\n\t\treturn(\n\t\t<div>\n\t\t\t<p>\n\t\t\tNo feedback given\n\t\t\t</p>\n\t\t</div>\n\t\t)\n\t}\n\t\n\treturn (\n\t\t<div>\n\t\t\t<p>\n\t\t\t\tGood = {props.good} <br/>\n\t\t\t\tNeutral = {props.neutral} <br/>\n\t\t\t\tBad = {props.bad} <br/>\n\t\t\t\tAll={all} <br/>\n\t\t\t\tAverage = {average} <br/>\n\t\t\t\tPositive = {positive}%\n\t\t\t</p>\n\t\t</div>\n\t\t)\n}\n\nconst App = () => {\n  // save clicks of each button to own state\n\t\n  const [good, setGood] = useState(0)\n  const [neutral, setNeutral] = useState(0)\n  const [bad, setBad] = useState(0)\t\n\n  return (\n    <div>\n      <h1>Give Feedback</h1>\n        <button onClick={() => setGood(good + 1)}>good</button>\n        <button onClick={() => setNeutral(neutral + 1)}>neutral</button>  \n        <button onClick={() => setBad(bad + 1)}>bad</button>  \n\t  <h1>Statistics</h1>\n\t\t<Statistics good={good} bad={bad} neutral={neutral}/>\n    </div>\n  )\n}\n\nReactDOM.render(<App />, \n  document.getElementById('root')\n)*/","map":{"version":3,"sources":["C:/Users/lidde/Documents/MOOC Full Stack Course/part1/unicaf/unicaf/src/index.js"],"names":["React","useState","ReactDOM","Statistic","props","name","value","good","neutral","bad","all","average","positive","Statistics","App","setGood","setNeutral","setBad","render","document","getElementById"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport ReactDOM from 'react-dom'\n\nconst Statistic = (props) => {\n\n\t\n\treturn (\n\t\t<div>\n\t\t\t<p>\n\t\t\t{props.name} {props.value}\n\t\t\t</p>\n\t\tStatistics good = {good}\n\t\tStatistics neutral = {neutral}\n\t\tStatistics bad = {bad}\n\t\tStatistics all = {all}\n\t\tStatistics average = {average}\n\t\tStatistics positive = {positive}\n\t\t</div>\n\t)\n}\n\nconst Statistics = (props) => {\n\n\tif (props.all === 0) {\n\t\treturn(\n\t\t<div>\n\t\t\t<p>\n\t\t\tNo feedback given\n\t\t\t</p>\n\t\t</div>\n\t\t)\n\t}\n\t\n\treturn (\n\t\t<div>\n\t\t\t\t<Statistic name=\"Good\" value={props.good} />\n\t\t\t\t<Statistic name=\"Neutral\" value={props.neutral} />\n\t\t\t\t<Statistic name=\"Bad\" value={props.bad} />\n\t\t\t\t<Statistic name=\"All\" value={props.all} />\n\t\t\t\t<Statistic name=\"Average\" value={props.average} />\n\t\t\t\t<Statistic name=\"Positive\" value={props.positive} />\n\t\t</div>\n\t)\n}\n\nconst App = () => {\n  // save clicks of each button to own state\n\t\n  const [good, setGood] = useState(0)\n  const [neutral, setNeutral] = useState(0)\n  const [bad, setBad] = useState(0)\t\n  const all = props.good+props.neutral+props.bad\n  const average = ((props.good*1)+(props.bad*-1))/all\n  const positive = (props.good/all)*100\n\n  return (\n    <div>\n      <h1>Give Feedback</h1>\n        <button onClick={() => setGood(good + 1)}>good</button>\n        <button onClick={() => setNeutral(neutral + 1)}>neutral</button>  \n        <button onClick={() => setBad(bad + 1)}>bad</button>  \n\t  <h1>Statistics</h1>\n\t\t<div>\n\t\t\t{Statistic}\n\t\t</div>\n    </div>\n  )\n}\n\nReactDOM.render(<App />, \ndocument.getElementById('root')\n)\n\n\n/*import React, { useState } from 'react'\nimport ReactDOM from 'react-dom'\n\nconst Statistic = (props) => {\n\t\n}\n\nconst Statistics = (props) => {\n\tconst all = props.good+props.neutral+props.bad\n\tconst average = ((props.good*1)+(props.bad*-1))/all\n  \tconst positive = (props.good/all)*100\n\t\n\tif (all === 0) {\n\t\treturn(\n\t\t<div>\n\t\t\t<p>\n\t\t\tNo feedback given\n\t\t\t</p>\n\t\t</div>\n\t\t)\n\t}\n\t\n\treturn (\n\t\t<div>\n\t\t\t<p>\n\t\t\t\tGood = {props.good} <br/>\n\t\t\t\tNeutral = {props.neutral} <br/>\n\t\t\t\tBad = {props.bad} <br/>\n\t\t\t\tAll={all} <br/>\n\t\t\t\tAverage = {average} <br/>\n\t\t\t\tPositive = {positive}%\n\t\t\t</p>\n\t\t</div>\n\t\t)\n}\n\nconst App = () => {\n  // save clicks of each button to own state\n\t\n  const [good, setGood] = useState(0)\n  const [neutral, setNeutral] = useState(0)\n  const [bad, setBad] = useState(0)\t\n\n  return (\n    <div>\n      <h1>Give Feedback</h1>\n        <button onClick={() => setGood(good + 1)}>good</button>\n        <button onClick={() => setNeutral(neutral + 1)}>neutral</button>  \n        <button onClick={() => setBad(bad + 1)}>bad</button>  \n\t  <h1>Statistics</h1>\n\t\t<Statistics good={good} bad={bad} neutral={neutral}/>\n    </div>\n  )\n}\n\nReactDOM.render(<App />, \n  document.getElementById('root')\n)*/"]},"metadata":{},"sourceType":"module"}