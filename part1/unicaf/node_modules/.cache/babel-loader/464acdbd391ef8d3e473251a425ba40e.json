{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\lidde\\\\Documents\\\\MOOC Full Stack Course\\\\part1\\\\unicaf\\\\unicaf\\\\src\\\\index.js\";\nimport React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\n\nconst Statistic = props => {\n  const good = props.good;\n  const bad = props.bad;\n  const neutral = props.neutral;\n  const all = props.good + props.neutral + props.bad;\n  const average = (props.good * 1 + props.bad * -1) / all;\n  const positive = props.good / all * 100;\n  return /*#__PURE__*/React.createElement(Statistics, {\n    good: good,\n    neutral: neutral,\n    bad: bad,\n    all: all,\n    average: average,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 3\n    }\n  });\n};\n\nconst Statistics = props => {\n  if (props.all === 0) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 3\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 4\n      }\n    }, \"No feedback given\"));\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 4\n    }\n  }, \"Statistic name=\\\"Good\\\" value=\", props.good, \" \", /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 46\n    }\n  }), \"Statistic name=\\\"Neutral\\\" value=\", props.neatural, \" \", /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 53\n    }\n  }), \"Statistic name=\\\"Bad\\\" value=\", props.bad, \" \", /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 44\n    }\n  }), \"Statistic name=\\\"All\\\" value=\", props.all, \" \", /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 44\n    }\n  }), \"Statistic name=\\\"Average\\\" value=\", props.average, \" \", /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 52\n    }\n  }), \"Statistic name=\\\"Positive\\\" value=\", props.positive, \" \", /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 54\n    }\n  })));\n};\n\nconst App = () => {\n  // save clicks of each button to own state\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }\n  }, \"Give Feedback\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => setGood(good + 1),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }\n  }, \"good\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => setNeutral(neutral + 1),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }\n  }, \"neutral\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => setBad(bad + 1),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }\n  }, \"bad\"), /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 4\n    }\n  }, \"Statistics\"), /*#__PURE__*/React.createElement(Statistic, {\n    good: good,\n    bad: bad,\n    neutral: neutral,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 3\n    }\n  }));\n};\n\nReactDOM.render( /*#__PURE__*/React.createElement(App, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 17\n  }\n}), document.getElementById('root'));\n/*import React, { useState } from 'react'\nimport ReactDOM from 'react-dom'\n\nconst Statistic = (props) => {\n\t\n}\n\nconst Statistics = (props) => {\n\tconst all = props.good+props.neutral+props.bad\n\tconst average = ((props.good*1)+(props.bad*-1))/all\n  \tconst positive = (props.good/all)*100\n\t\n\tif (all === 0) {\n\t\treturn(\n\t\t<div>\n\t\t\t<p>\n\t\t\tNo feedback given\n\t\t\t</p>\n\t\t</div>\n\t\t)\n\t}\n\t\n\treturn (\n\t\t<div>\n\t\t\t<p>\n\t\t\t\tGood = {props.good} <br/>\n\t\t\t\tNeutral = {props.neutral} <br/>\n\t\t\t\tBad = {props.bad} <br/>\n\t\t\t\tAll={all} <br/>\n\t\t\t\tAverage = {average} <br/>\n\t\t\t\tPositive = {positive}%\n\t\t\t</p>\n\t\t</div>\n\t\t)\n}\n\nconst App = () => {\n  // save clicks of each button to own state\n\t\n  const [good, setGood] = useState(0)\n  const [neutral, setNeutral] = useState(0)\n  const [bad, setBad] = useState(0)\t\n\n  return (\n    <div>\n      <h1>Give Feedback</h1>\n        <button onClick={() => setGood(good + 1)}>good</button>\n        <button onClick={() => setNeutral(neutral + 1)}>neutral</button>  \n        <button onClick={() => setBad(bad + 1)}>bad</button>  \n\t  <h1>Statistics</h1>\n\t\t<Statistics good={good} bad={bad} neutral={neutral}/>\n    </div>\n  )\n}\n\nReactDOM.render(<App />, \n  document.getElementById('root')\n)*/","map":{"version":3,"sources":["C:/Users/lidde/Documents/MOOC Full Stack Course/part1/unicaf/unicaf/src/index.js"],"names":["React","useState","ReactDOM","Statistic","props","good","bad","neutral","all","average","positive","Statistics","neatural","App","setGood","setNeutral","setBad","render","document","getElementById"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport ReactDOM from 'react-dom'\n\nconst Statistic = (props) => {\n\tconst good = props.good\n\tconst bad = props.bad\n\tconst neutral = props.neutral\n\tconst all = props.good+props.neutral+props.bad\n\tconst average = ((props.good*1)+(props.bad*-1))/all\n  \tconst positive = (props.good/all)*100\n\t\n\treturn(\n\t\t<Statistics \n\t\t\tgood = {good}\n\t\t\tneutral = {neutral}\n\t\t\tbad = {bad}\n\t\t\tall = {all}\n\t\t\taverage = {average}/>\n\t)\n\t\n}\n\nconst Statistics = (props) => {\n\n\tif (props.all === 0) {\n\t\treturn(\n\t\t<div>\n\t\t\t<p>\n\t\t\tNo feedback given\n\t\t\t</p>\n\t\t</div>\n\t\t)\n\t}\n\t\n\treturn (\n\t\t<div>\n\t\t\t<p>\n\t\t\t\tStatistic name=\"Good\" value={props.good} <br/>\n\t\t\t\tStatistic name=\"Neutral\" value={props.neatural} <br/>\n\t\t\t\tStatistic name=\"Bad\" value={props.bad} <br/>\n\t\t\t\tStatistic name=\"All\" value={props.all} <br/>\n\t\t\t\tStatistic name=\"Average\" value={props.average} <br/>\n\t\t\t\tStatistic name=\"Positive\" value={props.positive} <br/>\n\t\t\t</p>\n\t\t</div>\n\t\t)\n}\n\nconst App = () => {\n  // save clicks of each button to own state\n\t\n  const [good, setGood] = useState(0)\n  const [neutral, setNeutral] = useState(0)\n  const [bad, setBad] = useState(0)\t\n\n  return (\n    <div>\n      <h1>Give Feedback</h1>\n        <button onClick={() => setGood(good + 1)}>good</button>\n        <button onClick={() => setNeutral(neutral + 1)}>neutral</button>  \n        <button onClick={() => setBad(bad + 1)}>bad</button>  \n\t  <h1>Statistics</h1>\n\t\t<Statistic good={good} bad={bad} neutral={neutral}/>\n    </div>\n  )\n}\n\nReactDOM.render(<App />, \ndocument.getElementById('root')\n)\n\n\n/*import React, { useState } from 'react'\nimport ReactDOM from 'react-dom'\n\nconst Statistic = (props) => {\n\t\n}\n\nconst Statistics = (props) => {\n\tconst all = props.good+props.neutral+props.bad\n\tconst average = ((props.good*1)+(props.bad*-1))/all\n  \tconst positive = (props.good/all)*100\n\t\n\tif (all === 0) {\n\t\treturn(\n\t\t<div>\n\t\t\t<p>\n\t\t\tNo feedback given\n\t\t\t</p>\n\t\t</div>\n\t\t)\n\t}\n\t\n\treturn (\n\t\t<div>\n\t\t\t<p>\n\t\t\t\tGood = {props.good} <br/>\n\t\t\t\tNeutral = {props.neutral} <br/>\n\t\t\t\tBad = {props.bad} <br/>\n\t\t\t\tAll={all} <br/>\n\t\t\t\tAverage = {average} <br/>\n\t\t\t\tPositive = {positive}%\n\t\t\t</p>\n\t\t</div>\n\t\t)\n}\n\nconst App = () => {\n  // save clicks of each button to own state\n\t\n  const [good, setGood] = useState(0)\n  const [neutral, setNeutral] = useState(0)\n  const [bad, setBad] = useState(0)\t\n\n  return (\n    <div>\n      <h1>Give Feedback</h1>\n        <button onClick={() => setGood(good + 1)}>good</button>\n        <button onClick={() => setNeutral(neutral + 1)}>neutral</button>  \n        <button onClick={() => setBad(bad + 1)}>bad</button>  \n\t  <h1>Statistics</h1>\n\t\t<Statistics good={good} bad={bad} neutral={neutral}/>\n    </div>\n  )\n}\n\nReactDOM.render(<App />, \n  document.getElementById('root')\n)*/"]},"metadata":{},"sourceType":"module"}