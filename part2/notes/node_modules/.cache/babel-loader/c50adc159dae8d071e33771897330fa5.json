{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\lidde\\\\Documents\\\\MOOC Full Stack Course\\\\part2\\\\notes\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"C:\\\\Users\\\\lidde\\\\Documents\\\\MOOC Full Stack Course\\\\part2\\\\notes\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\lidde\\\\Documents\\\\MOOC Full Stack Course\\\\part2\\\\notes\\\\src\\\\App.js\";\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport Note from './components/Note';\nimport noteService from './services/notes';\n\nconst App = () => {\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        notes = _useState2[0],\n        setNotes = _useState2[1];\n\n  const _useState3 = useState(''),\n        _useState4 = _slicedToArray(_useState3, 2),\n        newNote = _useState4[0],\n        setNewNote = _useState4[1];\n\n  const _useState5 = useState(true),\n        _useState6 = _slicedToArray(_useState5, 2),\n        showAll = _useState6[0],\n        setShowAll = _useState6[1];\n\n  useEffect(() => {\n    noteService.getAll().then(initialNotes => {\n      setNotes(initialNotes);\n    });\n  }, []);\n\n  const addNote = event => {\n    event.preventDefault();\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() > 0.5\n    };\n    noteService.create(noteObject).then(returnedNote => {\n      setNotes(notes.concat(returnedNote));\n      setNewNote('');\n    });\n  };\n\n  const handleNoteChange = event => {\n    setNewNote(event.target.value);\n  };\n\n  const notesToShow = showAll ? notes : notes.filter(note => note.important);\n\n  const toggleImportanceOf = id => {\n    const note = notes.find(n => n.id === id);\n\n    const changedNote = _objectSpread({}, note, {\n      important: !note.important\n    });\n\n    noteService.update(id, changedNote).then(returnedNote => {\n      setNotes(notes.map(note => note.id !== id ? note : returnedNote));\n    }).catch(error => {\n      alert(`the note '${note.content}' was already deleted from server`);\n      setNotes(notes.filter(n => n.id !== id));\n    });\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, \"Notes\"), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    onClick: () => setShowAll(!showAll),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, \"show \", showAll ? 'important' : 'all')), React.createElement(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, notesToShow.map((note, i) => React.createElement(Note, {\n    key: i,\n    note: note,\n    toggleImportance: () => toggleImportanceOf(note.id),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }))), React.createElement(\"form\", {\n    onSubmit: addNote,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    value: newNote,\n    onChange: handleNoteChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    type: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, \"save\")));\n};\n\nexport default App;","map":{"version":3,"sources":["C:/Users/lidde/Documents/MOOC Full Stack Course/part2/notes/src/App.js"],"names":["React","useState","useEffect","axios","Note","noteService","App","notes","setNotes","newNote","setNewNote","showAll","setShowAll","getAll","then","initialNotes","addNote","event","preventDefault","noteObject","content","date","Date","toISOString","important","Math","random","create","returnedNote","concat","handleNoteChange","target","value","notesToShow","filter","note","toggleImportanceOf","id","find","n","changedNote","update","map","catch","error","alert","i"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport axios from 'axios'\r\nimport Note from './components/Note'\r\nimport noteService from './services/notes'\r\n\r\nconst App = () => {\r\n  const [notes, setNotes] = useState([])\r\n  const [newNote, setNewNote] = useState('')\r\n  const [showAll, setShowAll] = useState(true)\r\n\r\n  useEffect(() => {\r\n      noteService\r\n        .getAll()\r\n        .then(initialNotes => {\r\n          setNotes(initialNotes)\r\n        })\r\n    }, [])\r\n\r\n  const addNote = (event) => {\r\n    event.preventDefault()\r\n    const noteObject = {\r\n      content: newNote,\r\n      date: new Date().toISOString(),\r\n      important: Math.random() > 0.5,\r\n    }\r\n\r\n    noteService\r\n      .create(noteObject)\r\n        .then(returnedNote => {\r\n        setNotes(notes.concat(returnedNote))\r\n        setNewNote('')\r\n      })\r\n  }\r\n\r\n  const handleNoteChange = (event) => {\r\n    setNewNote(event.target.value)\r\n  }\r\n\r\n  const notesToShow = showAll\r\n    ? notes\r\n    : notes.filter(note => note.important)\r\n\r\n    const toggleImportanceOf = id => {\r\n  const note = notes.find(n => n.id === id)\r\n  const changedNote = { ...note, important: !note.important }\r\n\r\n  noteService\r\n    .update(id, changedNote).then(returnedNote => {\r\n      setNotes(notes.map(note => note.id !== id ? note : returnedNote))\r\n    })\r\n    .catch(error => {\r\n      alert(\r\n        `the note '${note.content}' was already deleted from server`\r\n      )\r\n      setNotes(notes.filter(n => n.id !== id))\r\n    })\r\n}\r\n\r\n  return (\r\n    <div>\r\n      <h1>Notes</h1>\r\n      <div>\r\n        <button onClick={() => setShowAll(!showAll)}>\r\n          show {showAll ? 'important' : 'all' }\r\n        </button>\r\n      </div>\r\n      <ul>\r\n        {notesToShow.map((note, i) =>\r\n          <Note\r\n          key={i}\r\n          note={note}\r\n          toggleImportance={() => toggleImportanceOf(note.id)}\r\n          />\r\n        )}\r\n      </ul>\r\n      <form onSubmit={addNote}>\r\n        <input\r\n          value={newNote}\r\n          onChange={handleNoteChange}\r\n        />\r\n        <button type=\"submit\">save</button>\r\n      </form>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n"]},"metadata":{},"sourceType":"module"}